import os, subprocess
import threading
import time
import random

class swarmulator:
	def __init__(self, path):
		self.path = path
	
	def make(self, animation=False, logger=False, verbose=False, speed=True, clean=False):
		spd = " -j" if speed else ""
		ani = " ANIMATION=ON" if animation else ""
		log = " LOG=ON" if logger else ""
		vrb = " VERBOSE=ON" if verbose else ""
		if clean:
			subprocess.call("cd " + self.path + " && make clean ", shell=True)
		subprocess.call("cd " + self.path + " && make" + spd + ani + log + vrb, shell=True)
		print("# Done")

	def launch(self, n, i):
		subprocess.call("cd " + self.path + " && ./swarmulator " + str(n), shell=True)
		
	def get_fitness(self):
		while not os.path.lexists(self.pipe):
			time.sleep(1) # wait for swarmulator to complete
		f = open(self.pipe).read() # FIFO pipe generated by swarmulator
		print("Received fitness " + str(f))
		return f

	def run(self, n, i=0):
		a = random.randrange(100000);
		self.pipe = str("/tmp/swarmulator_" + str(a))
		self.runtime_setting("pipe",self.pipe) # unique pipe ID
		t = threading.Thread(target=self.launch, args=(n,i,))
		t.start()
		f = self.get_fitness()
		return f

	def runtime_setting(self, setting, value):
		s = "xmlstarlet edit -L -u \"/parameters/" + setting + "\" -v \""+ value + "\" " + self.path + "/conf/parameters.xml"
		subprocess.call(s, shell=True)
		print("Runtime setting \"" + setting + "\" has been set to \"" + value + "\"")

	def get_runtime_setting(self, setting):
		s =  "xmlstarlet sel -t -v" +  " \"parameters/" +setting + "\" "+ self.path + "/conf/parameters.xml"
		value = subprocess.getoutput(s)
		print("Runtime setting \"" + setting + "\" is \"" + value + "\"")
		return value;